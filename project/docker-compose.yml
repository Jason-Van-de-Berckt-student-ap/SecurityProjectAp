version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: easm_redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - easm_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: easm_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-easm_db}
      POSTGRES_USER: ${POSTGRES_USER:-easm_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-easm_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-easm_user} -d ${POSTGRES_DB:-easm_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - easm_network

  # EASM Application
  easm_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: easm_application
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-easm_user}:${POSTGRES_PASSWORD:-easm_pass}@postgres:5432/${POSTGRES_DB:-easm_db}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - MAX_WORKERS=${MAX_WORKERS:-10}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-3600}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./results:/app/results
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - easm_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: easm_nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - easm_app
    restart: unless-stopped
    networks:
      - easm_network
    profiles:
      - production

  # Monitoring (Prometheus - Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: easm_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - easm_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: easm_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - easm_network
    profiles:
      - monitoring

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  easm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
